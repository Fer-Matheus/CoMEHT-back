definitions:
  views.CommitMessageRequest:
    properties:
      diff_id:
        type: integer
      message:
        type: string
      model_id:
        type: integer
    type: object
  views.CommitMessageResponse:
    properties:
      diff_id:
        type: integer
      id:
        type: integer
      message:
        type: string
      model_id:
        type: integer
    type: object
  views.CommitMessagesResponse:
    properties:
      commit_messages:
        items:
          $ref: '#/definitions/views.CommitMessageResponse'
        type: array
    type: object
  views.DiffRequest:
    properties:
      content:
        type: string
    type: object
  views.DiffResponse:
    properties:
      commit_messages:
        items:
          type: integer
        type: array
      content:
        type: string
      id:
        type: integer
    type: object
  views.DiffsResponse:
    properties:
      diffs:
        items:
          $ref: '#/definitions/views.DiffResponse'
        type: array
    type: object
  views.DuelResponse:
    properties:
      commit_message_a:
        type: string
      commit_message_b:
        type: string
      diff_content:
        type: string
      duel_id:
        type: integer
    type: object
  views.LoginResponse:
    properties:
      token:
        type: string
    type: object
  views.ModelRequest:
    properties:
      name:
        type: string
    type: object
  views.ModelResponse:
    properties:
      commit_messages:
        items:
          type: integer
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  views.ModelsResponse:
    properties:
      models:
        items:
          $ref: '#/definitions/views.ModelResponse'
        type: array
    type: object
  views.Options:
    properties:
      aspect:
        type: string
      choice_time:
        type: number
      chosen_option:
        type: string
    type: object
  views.ResultsRequest:
    properties:
      duel_id:
        type: integer
      options:
        items:
          $ref: '#/definitions/views.Options'
        type: array
    type: object
  views.UserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is the comeht server api.
  title: comeht Server
  version: "1.0"
paths:
  /commit_messages:
    get:
      consumes:
      - application/json
      description: A route to get all commit messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.CommitMessagesResponse'
      summary: Get all commit messages
      tags:
      - Commit Message
    post:
      consumes:
      - application/json
      description: A route to save a new commit message
      parameters:
      - description: commitMessageRequest
        in: body
        name: commitMessageRequest
        required: true
        schema:
          $ref: '#/definitions/views.CommitMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.CommitMessageResponse'
      summary: Save a new commit message
      tags:
      - Commit Message
  /commit_messages/{id}:
    get:
      consumes:
      - application/json
      description: A route to get a commit message by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.CommitMessageResponse'
      summary: Get a commit message
      tags:
      - Commit Message
  /diffs:
    get:
      consumes:
      - application/json
      description: A route to get all diffs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.DiffsResponse'
      summary: Get all diffs
      tags:
      - Diff
    post:
      consumes:
      - application/json
      description: A route to save a new diff
      parameters:
      - description: diffRequest
        in: body
        name: diffRequest
        required: true
        schema:
          $ref: '#/definitions/views.DiffRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.DiffResponse'
      summary: Save a new diff
      tags:
      - Diff
  /diffs/{id}:
    get:
      consumes:
      - application/json
      description: A route to get a diff by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.DiffResponse'
      summary: Get a diff
      tags:
      - Diff
  /duels:
    get:
      description: A route to get a duel for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.DuelResponse'
      security:
      - Bearer: []
      summary: Get a new duel
      tags:
      - Duel
  /login:
    post:
      consumes:
      - application/json
      description: A route for user login
      parameters:
      - description: userRequest
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/views.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.LoginResponse'
      summary: Login for a user
      tags:
      - User
  /logout:
    post:
      description: A route to logout a user by cookie
      responses: {}
      security:
      - Bearer: []
      summary: Logout a user
      tags:
      - User
  /models:
    get:
      consumes:
      - application/json
      description: A route to get all models
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ModelsResponse'
      summary: Get all models
      tags:
      - Model
    post:
      consumes:
      - application/json
      description: A route to save a new model
      parameters:
      - description: modelRequest
        in: body
        name: modelRequest
        required: true
        schema:
          $ref: '#/definitions/views.ModelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.ModelResponse'
      summary: Save a new model
      tags:
      - Model
  /models/{id}:
    get:
      consumes:
      - application/json
      description: A route to get a model by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.ModelResponse'
      summary: Get a model
      tags:
      - Model
  /register:
    post:
      consumes:
      - application/json
      description: A route to register a new user
      parameters:
      - description: userRequest
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/views.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.LoginResponse'
      summary: Register a new user
      tags:
      - User
  /results:
    get:
      description: Route to get all results
      responses: {}
      security:
      - Bearer: []
      summary: Get all results
      tags:
      - Results
    post:
      consumes:
      - application/json
      description: A route to save a duel results
      parameters:
      - description: results
        in: body
        name: results
        required: true
        schema:
          $ref: '#/definitions/views.ResultsRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Save the duel results
      tags:
      - Duel
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
